const { GoogleGenerativeAI } = require('@google/generative-ai');
const path = require('path');
const dotenv = require('dotenv');

// Load environment variables from the root directory
dotenv.config({ path: path.resolve(__dirname, '../../.env') });

const API_KEY = process.env.GEMINI_API_KEY;

if (!API_KEY) {
    console.error('❌ GEMINI_API_KEY not found in .env file.');
    console.error('Please set GEMINI_API_KEY in your .env file located at the root of the project.');
    process.exit(1); // Exit if no API key, as AI functionality is central
}

const genAI = new GoogleGenerativeAI(API_KEY);

/**
 * Sends a text prompt to the Gemini model and returns the generated text.
 * @param {string} prompt The text prompt to send to the AI.
 * @param {string} [modelName='gemini-1.5-flash'] The name of the Gemini model to use.
 * @returns {Promise<string>} The generated text from the AI.
 * @throws {Error} If the API call fails or no text is generated.
 */
async function generateText(prompt, modelName = 'gemini-1.5-flash') {
    const maxRetries = 3;
    let attempt = 0;

    while (attempt < maxRetries) {
        try {
            const model = genAI.getGenerativeModel({ model: modelName });
            const result = await model.generateContent(prompt);
            const response = result.response;
            const text = response.text();

            if (!text) {
                throw new Error('No text content generated by the AI.');
            }

            return text;

        } catch (error) {
            attempt++;

            if (error.status === 503 || error.message?.includes('503')) {
                console.warn(`⚠️ Gemini is overloaded. Attempt ${attempt} of ${maxRetries}. Retrying...`);
                if (attempt < maxRetries) {
                    // Wait 1, 2, 3 seconds respectively
                    await new Promise(res => setTimeout(res, 1000 * attempt));
                } else {
                    console.error('❌ Gemini AI is still overloaded after multiple attempts.');
                    throw new Error('Gemini AI is overloaded. Please try again later.');
                }
            } else {
                console.error(`❌ Error generating text from Gemini model (${modelName}):`, error);
                throw new Error(`Failed to get response from AI: ${error.message || 'Unknown error'}`);
            }
        }
    }
}


async function summarizeContract(contractText) {
    const prompt = `Summarize the following legal contract text. Focus on key clauses, parties involved, obligations, and important terms. Provide a concise yet comprehensive summary:\n\n${contractText}`;
    return generateText(prompt);
}

async function extractKeyClauses(contractText) {
    const prompt = `From the following legal contract text, identify and list the most important clauses. For each clause, briefly explain its purpose or significance. Use bullet points or numbered lists for clarity:\n\n${contractText}`;
    return generateText(prompt);
}

module.exports = {
    generateText,
    summarizeContract,
    extractKeyClauses
};
