// server/services/geminiService.js

const { GoogleGenerativeAI } = require('@google/generative-ai');
const path = require('path');
const dotenv = require('dotenv');

// Load environment variables from the root directory
// Ensure dotenv is configured to load from the correct path.
// This is already handled in server.js, but including it here for clarity if this file were standalone.
dotenv.config({ path: path.resolve(__dirname, '../../.env') });

const API_KEY = process.env.GEMINI_API_KEY;

if (!API_KEY) {
    console.error('‚ùå GEMINI_API_KEY not found in .env file.');
    console.error('Please set GEMINI_API_KEY in your .env file located at the root of the project.');
    // Exit or throw error if API key is critical for server start
    process.exit(1); // Exit if no API key, as AI functionality is central
}

// Initialize the Google Generative AI client
const genAI = new GoogleGenerativeAI(API_KEY);

/**
 * Sends a text prompt to the Gemini model and returns the generated text.
 * @param {string} prompt The text prompt to send to the AI.
 * @param {string} [modelName='gemini-1.5-flash'] The name of the Gemini model to use.
 * @returns {Promise<string>} The generated text from the AI.
 * @throws {Error} If the API call fails or no text is generated.
 */
async function generateText(prompt, modelName = 'gemini-1.5-flash') {
    try {
        // For text-only input, use the gemini-1.5-flash model
        const model = genAI.getGenerativeModel({ model: modelName });

        const result = await model.generateContent(prompt);
        const response = result.response;
        const text = response.text(); // Extract the text content from the response

        if (!text) {
            throw new Error('No text content generated by the AI.');
        }

        return text;
    } catch (error) {
        console.error(`Error generating text from Gemini model (${modelName}):`, error);
        throw new Error(`Failed to get response from AI: ${error.message}`);
    }
}

/**
 * Summarizes the provided contract text using the Gemini model.
 * @param {string} contractText The text of the contract to summarize.
 * @returns {Promise<string>} The summary generated by the AI.
 */
async function summarizeContract(contractText) {
    const prompt = `Summarize the following legal contract text. Focus on key clauses, parties involved, obligations, and important terms. Provide a concise yet comprehensive summary:\n\n${contractText}`;
    return generateText(prompt);
}

/**
 * Extracts key clauses from the provided contract text using the Gemini model.
 * @param {string} contractText The text of the contract.
 * @returns {Promise<string>} The extracted key clauses.
 */
async function extractKeyClauses(contractText) {
    const prompt = `From the following legal contract text, identify and list the most important clauses. For each clause, briefly explain its purpose or significance. Use bullet points or numbered lists for clarity:\n\n${contractText}`;
    return generateText(prompt);
}

module.exports = {
    generateText,
    summarizeContract,
    extractKeyClauses
};
